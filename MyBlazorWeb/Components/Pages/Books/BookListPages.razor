@page "/booklistpages"
@using MyModels.Books
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject ILogger<BookList> logger

<PageTitle>@PageTitle</PageTitle>

<h1>@PageTitle</h1>

<div>
    <input type="checkbox" id="showAllData" @bind="ShowAllColumn" />
    <label for="showAllData"> Show All Column </label>
</div>

<div>
    Count : @SelectedCount
</div>

<input @bind="Keyword" placeholder="搜尋關鍵字" />
<button class="btn btn-success" @onclick="Search">查詢</button>

<select @bind="PageSize">
    <option value="5">5</option>
    <option value="10">10</option>
    <option value="20">20</option>
</select>

@if (Books is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-warning" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                @if (ShowAllColumn)
                {
                    <th>Price</th>
                    <th>PublishDate</th>
                    <th>InStock</th>
                    <th>Description</th>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Books)
            {
                <ShowBook Book="item" ShowAll="ShowAllColumn" OnSelected="SelectionChanged"></ShowBook>
            }
        </tbody>
    </table>

}

<button class="btn btn-info" @onclick="PrevPage" disabled="@(!CanPrev)">上一頁</button>
<button class="btn btn-success" @onclick="NextPage" disabled="@(!CanNext)">下一頁</button>


@code {
    private string PageTitle = "Books List Pages";
    public bool ShowAllColumn { get; set; } = true;

    public IEnumerable<Book> Books { get; set; } = null!;

    [Inject]
    public MyServices.IBookService bookService { get; set; } = default!;

    int Page = 1;
    int PageSize = 5;
    string Keyword = "";
    int TotalCount = 0;

    string CurrentSort = "Title";
    bool SortDesc = false;

    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    protected int SelectedCount { get; set; } = 0;

    protected void SelectionChanged(bool isSelected)
    {
        SelectedCount += isSelected ? 1 : -1;
    }

    public async Task Search()
    {

        Books = default!;
        await Task.Delay(5000);

        var request = new GetBooksRequest()
        {
            PageNumber = Page,
            PageSize = PageSize,
            SearchKeyword = Keyword,
            SortFields = new List<SortField>
            {
                new SortField { Field = CurrentSort, Desc = SortDesc }
            }
        };

        var result = await bookService.GetBooksPages(request);

        if(result is not null)
        {
            Books = result.DataList;
            TotalCount = result.TotalCount;
        }

    }

    void SortBy(string field)
    {
        if (CurrentSort == field)
            SortDesc = !SortDesc;
        else
        {
            CurrentSort = field;
            SortDesc = false;
        }

        Page = 1;
        _ = Search();
    }

    public void PrevPage()
    {
        if (Page > 1)
        {
            Page--;
            _ = Search();
        }
    }

    public void NextPage()
    {
        if (Page < (int)Math.Ceiling(TotalCount / (double)PageSize))
        {
            Page++;
            _ = Search();
        }
    }

    public bool CanPrev => Page > 1;
    public bool CanNext => Page < (int)Math.Ceiling(TotalCount / (double)PageSize);

}

