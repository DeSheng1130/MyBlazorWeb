@page "/booklistpages"
@using MyModels.Books
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject ILogger<BookList> logger

<PageTitle>@PageTitle</PageTitle>

<h1>@PageTitle</h1>

<div>
    <input type="checkbox" id="showAllData" @bind="ShowAllColumn" />
    <label for="showAllData"> Show All Column </label>
</div>

<div>
    Count : @SelectedCount
</div>

<form>
    <div class="row">
        <div class="col-3">
            <select class="form-select" @bind="PageSize">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
            </select>
        </div>
        <div class="col-3">          
            <input class="form-control" @bind="Keyword" placeholder="搜尋關鍵字" />
        </div>
        <div class="col-3">
            <button class="btn btn-success" @onclick="Search">查詢</button>
        </div>
    </div>
</form>


<table class="table">
    <thead>
        <tr>
            <th @onclick="@(() => SortBy("Id"))">
                Id @(GetSortArrow("Id"))
            </th>
            <th @onclick="@(() => SortBy("Title"))">
                Title @(GetSortArrow("Title"))
            </th>
            @if (ShowAllColumn)
            {
                <th @onclick="@(() => SortBy("Price"))">
                    Price @(GetSortArrow("Price"))
                </th>
                <th @onclick="@(() => SortBy("PublishDate"))">
                    PublishDate @(GetSortArrow("PublishDate"))
                </th>
                <th @onclick="@(() => SortBy("InStock"))">
                    InStock @(GetSortArrow("InStock"))
                </th>
                <th @onclick="@(() => SortBy("Description"))">
                    Description @(GetSortArrow("Description"))
                </th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
    @if (Books is null)
    {
        <tr>
            <td colspan="@((ShowAllColumn ? 6 : 2))">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-warning" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </td>
        </tr>
    }
    else
    {
        @foreach (var item in Books)
        {
            <ShowBook Book="item" ShowAll="ShowAllColumn" OnSelected="SelectionChanged"></ShowBook>
        }
    }
    </tbody>
</table>



<button class="btn btn-info" @onclick="PrevPage" disabled="@(!CanPrev)">上一頁</button>
<button class="btn btn-success" @onclick="NextPage" disabled="@(!CanNext)">下一頁</button>


@code {
    private string PageTitle = "Books List Pages";
    public bool ShowAllColumn { get; set; } = true;

    public IEnumerable<Book> Books { get; set; } = null!;

    [Inject]
    public MyServices.IBookService bookService { get; set; } = default!;

    int Page = 1;
    int PageSize = 5;
    string Keyword = "";
    int TotalCount = 0;

    List<SortField> SortFields = new(); // 多欄位排序

    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    protected int SelectedCount { get; set; } = 0;

    protected void SelectionChanged(bool isSelected)
    {
        SelectedCount += isSelected ? 1 : -1;
    }

    public async Task Search()
    {

        Books = default!;
        var request = new GetBooksRequest()
        {
            PageNumber = Page,
            PageSize = PageSize,
            SearchKeyword = Keyword,
            SortFields = SortFields
        };

        var result = await bookService.GetBooksPages(request);

        if(result is not null)
        {
            Books = result.DataList;
            TotalCount = result.TotalCount;
        }

    }

    public async Task SortBy(string field)
    {
        var existing = SortFields.FirstOrDefault(s => s.Field == field);
        if (existing != null)
        {
            existing.Desc = !existing.Desc; // 反轉排序方向
        }
        else
        {
            SortFields.Insert(0, new SortField { Field = field, Desc = false }); // 新欄位預設升冪，放最前面
        }

        Page = 1;
        await Search();
    }

    private string GetSortArrow(string field)
    {
        var sort = SortFields.FirstOrDefault(s => s.Field == field);
        if (sort == null) return "";
        return sort.Desc ? "↓" : "↑";
    }

    public async Task PrevPage()
    {
        if (Page > 1)
        {
            Page--;
            await Search();
        }
    }

    public async Task NextPage()
    {
        if (Page < (int)Math.Ceiling(TotalCount / (double)PageSize))
        {
            Page++;
            await Search();
        }
    }

    public bool CanPrev => Page > 1;
    public bool CanNext => Page < (int)Math.Ceiling(TotalCount / (double)PageSize);

}

